<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:websocket="http://www.springframework.org/schema/websocket"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.0.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
            http://www.springframework.org/schema/websocket
            http://www.springframework.org/schema/websocket/spring-websocket-4.0.xsd
            ">
    <!-- 开启spring注解 只包含@Controller注解 -->       
    <context:annotation-config />
    <context:component-scan base-package="indi.jack" use-default-filters="false">
        <context:include-filter type="annotation"
                expression="org.springframework.stereotype.Controller" />
    </context:component-scan>        
    <!-- 开启MVC注解 -->        
	<!-- validator引用根上下文的验证器  	-->
    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager" validator="validatorFactory">
    	<!-- 自定义json转换器 -->
    	
    	<mvc:message-converters>
    		<!-- 去除返回字符串时的引号 -->  
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">  
                <constructor-arg value="UTF-8" />  
                <!-- 避免出现乱码 -->    
                <property name="supportedMediaTypes">    
                    <list>    
                        <value>text/plain;charset=UTF-8</value>    
                    </list>    
                </property>  
            </bean> 
    		<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
	            <property name="objectMapper" ref="objectMapper"/>
	            <property name="supportedMediaTypes">
	            <list>
	                <value>text/html;charset=UTF-8</value>
	            </list>           
	        	</property> 
        	</bean>
    	</mvc:message-converters>
    	<mvc:argument-resolvers >
    		<!-- 配置排序和分页解析器（用来解析mvc控制器的参数） -->
			<bean class="org.springframework.data.web.SortHandlerMethodArgumentResolver" />
			<bean class="org.springframework.data.web.PageableHandlerMethodArgumentResolver">
			</bean>
    	</mvc:argument-resolvers>
    	<!-- 注意在根上下文中配置的异步支持只能用于没有标注@Controller的类，若想在控制器层使用异步需要在下方配置 -->
    	<!-- <mvc:async-support ></mvc:async-support>  -->  		
    </mvc:annotation-driven> 
    <!-- 自定义json对象映射 -->
    <bean id="objectMapper" class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"
		      p:indentOutput="true"
		      p:simpleDateFormat="yyyy-MM-dd HH:mm:ss"
		      p:autoDetectFields="true"
       		  p:autoDetectGettersSetters="true"
       		  >
       		 <!--  <property name="featuresToDisable">
       		  		<list>
       		  			<ref bean="com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES"/>
       		  		</list>
       		  </property> -->
    </bean>
    <!-- 自定义json生成格式 -->
    <bean id="com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean"></bean>
    <!-- 配置内容协商 -->
   <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		    <property name="mediaTypes">
		        <value>
		            json=application/json
		            xml=application/xml
		        </value>
		    </property>
		    <property name="defaultContentType" value="application/json"/>
	</bean>
    
    
    
    <!-- 该配置使得客户可直接访问web-inf目录下 的资源-->
    <mvc:view-controller path="/static" view-name="404"/>
    <!-- mvc拦截配置 -->
    <mvc:interceptors >
    	<mvc:interceptor>
    		<mvc:mapping path="/**/*"/>
    		<bean class="indi.jack.intecepter_filter.CrossInterceptor"></bean>
    	</mvc:interceptor>
    </mvc:interceptors>
    <!-- 静态资源映射 -->
    <mvc:resources mapping="/fonts/**" location="/resources/fonts/" />
    <mvc:resources mapping="/images/**" location="/resources/images/" />
    <mvc:resources mapping="/js/**" location="/resources/js/" />
    <mvc:resources mapping="/css/**" location="/resources/css/" />
    <mvc:resources mapping="/error/**" location="/resources/error/" />
    <mvc:resources mapping="/dist/**" location="/resources/dist/" />
    <!-- 视图解析器配置 -->
	<bean id="ViewResolver"  class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 配置前缀后缀 -->
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>
        <property name="prefix" value="WEB-INF/views/jsp/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>
    <!-- 请求视图名称转换器 -->
    <bean id="RequestToViewNameTranslator" class="org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator"/>		   
	<!-- 本地cookie识别解析器 -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
    	<!-- 自定义COOKIE的名字 -->
    	<property name="cookieName" value="JSESSIONID"/>
    	<property name="cookieMaxAge" value="100000"/>
    </bean>  
    <!-- mvc url拦截器 -->
    <mvc:interceptors>
     	<!-- 配置本地变化侦测器  若要修改本地语言需要加入参数siteLanguage=?-->  
	     <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
	     	<property name="paramName" value="siteLanguage"/>
	     </bean>
    </mvc:interceptors>
    <!-- 配置文件上传解析器 -->
    <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <property name="maxUploadSize" value="-1"/>
	</bean>
	
	<!-- 配置验证器 -->
	<!--  <bean id="validator" class="org.springframework.validation.beanvalidation.SpringValidatorAdapter">	 	
	 </bean> -->
	 
	<!-- websocket配置 -->
	<bean id="myHandler" class="indi.jack.testserviceImpl.WebsocketHandler"/>
	<bean class="org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean">
        <property name="maxTextMessageBufferSize" value="8192"/>
        <property name="maxBinaryMessageBufferSize" value="8192"/>
    </bean>
    <!-- <websocket:handlers>
        <websocket:mapping path="/websocket" handler="myHandler"/>
        <websocket:handshake-interceptors> 
    		<bean class="indi.jack.intecepter_filter.HandShakeInterceptor"/>  
    		<bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
    	</websocket:handshake-interceptors>
        <websocket:sockjs/>
        <websocket:handshake-interceptors>
        	<bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
        </websocket:handshake-interceptors>
    </websocket:handlers> -->
    <bean id="myHandShakeHandler" class="indi.jack.intecepter_filter.HandShakeHandler"/>
    <!-- <websocket:handlers >
    	<websocket:handshake-interceptors>
        		<bean class="indi.jack.intecepter_filter.HandShakeInterceptor"/>  
        </websocket:handshake-interceptors>
    </websocket:handlers> -->
    <websocket:message-broker application-destination-prefix="/minersocket" user-destination-prefix="/user">
        <websocket:stomp-endpoint path="/notice" >
        	<websocket:handshake-handler ref="myHandShakeHandler"/>
        	<websocket:sockjs/>
        </websocket:stomp-endpoint>
        <websocket:simple-broker prefix="/topic,/discuss,/chatroom" />
        <!-- <websocket:client-inbound-channel ></websocket:client-inbound-channel> -->
    </websocket:message-broker>

</beans>
	
